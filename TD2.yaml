openapi: 3.0.1
info:
  title: STD21100 cinema
  description: Movie theater management API
  version: 1.0.0
servers:
- url: https://cinema-STD21100.com
tags:
- name: Films
- name: Projection
- name: Hall
paths:
  /film:
    post:
      tags:
      - Films
      summary: Insert a new film 
      operationId: createFilm
      description: Create new film from an array
      requestBody:
        description: Film to create with these properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createFilms'
        required: true
      responses:
        400:
          description: Bad request
        200:
          description: Film created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/films'
    get:
      tags:
      - Films
      summary: Get all films
      operationId: getFilms
      description: Get all films with details 
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
      - name: page_size
        in: query
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Bad request
        200:
          description: List of films
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/films'
    put:
      tags:
      - Films
      summary: Create new film or update an existing film
      description: Update film when id are provided, create them otherwise.
      operationId: updateFilm
      requestBody:
        description: Films object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/films'
        required: true
      responses:
        400:
          description: Bad request
        200:
          description: Film updated
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/films'
                
  /film/{id}:
    patch:
      tags:
        - Films
      summary: Update a film
      operationId: updateAFilm
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      requestBody:
        required: true
        description: Update film with properties to be changed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createFilms'
      responses:
          200:
            description: Film updated
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/films'
    get:
      tags:
      - Films
      summary: Get film by id
      operationId: getFilmsById
      description: Get film with his details by his id 
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Bad request
        200:
          description: List of films
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/films'
    delete:
      tags:
      - Films
      summary: Delete a film
      operationId: deleteFilm
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Film is delete
  
  /category:
    get:
      tags:
      - Films
      summary: Get all categories
      operationId: getCategories
      description: Get all categories with details
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
      - name: page_size
        in: query
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Bad request
        200:
          description: List of films
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/useCategory'
  
  /category/{identifier}:
    get:
      tags:
      - Films
      summary: Get a category by its identifier
      operationId: getCategoryByIdentifier
      description: Get category with details
      parameters:
      - name: identifier
        in: path
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Bad request
        200:
          description: List of films
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/useCategory'

  /film/{category}:
    get:
      tags:
      - Films
      summary: Get all films by categories
      operationId: getFilmsByCategories
      description: Get all films with details by categories
      parameters:
      - name: category
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: integer
      - name: page_size
        in: query
        schema:
          type: integer
      responses:
        400:
          description: Bad request
        200:
          description: List of films
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/films'
 

  /projection:
    post:
      tags:
      - Projection
      summary: Insert a new Projection 
      operationId: createProjection
      description: Projection to be created with these properties
      requestBody:
        description: Projection to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createProjection'
        required: true
      responses:
        400:
          description: Bad request
        200:
          description: Projection created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/projection'
    get:
      tags:
      - Projection
      summary: Get all Projections
      operationId: getProjections
      description: Get all Projections with details
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
      - name: page_size
        in: query
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Bad request
        200:
          description: List of Projections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/projection'

    put:
      tags:
      - Projection
      summary: Create new projection or update an existing projection
      description: Update Projection when id are provided, create them otherwise.
      operationId: updateProjection
      requestBody:
        description: Projection object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createProjection'
        required: true
      responses:
        400:
          description: Bad request
        200:
          description: Courses updates
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/projection'
                
  /projection/week:
    get:
      tags:
      - Projection
      summary: get all next week's projections
      operationId: getProjectionsonweek
      description: Get all Projections with details
      responses:
        400:
          description: Bad request
        200:
          description: List of Projections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/calendar'

  /projection/{id}:     
    get:
      tags:
      - Projection
      summary: Get projection by its id
      operationId: getProjection
      description: Get a projection with details
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Bad request
        200:
          description: List of Projections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/projection'
                  
    patch:
      tags:
        - Projection
      summary: Update a Projection
      operationId: UpdateProjection
      description: You can modify id of film, identifier of hall and startProjection properties
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      requestBody:
        required: true
        description: Update Projection with properties to be changed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateProjection'
      responses:
          200:
            description: Projection updated
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/projection'
                    
    delete:
        tags:
        - Projection
        summary: Delete a Projection
        operationId: deleteProjection
        parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        responses:
          200:
            description: Projection is delete

  /calendar:
    post:
      tags:
      - Projection
      summary: Create a new Calendar 
      operationId: createCalendar
      description: Calendar to be created with these properties
      requestBody:
        description: Calendar to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/calendar'
        required: true
      responses:
        400:
          description: Bad request
        200:
          description: Calendar created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/calendar'
  /calendar/{idCalendar}:
    patch:
      tags:
        - Projection
      summary: Update a Calendar
      operationId: UpdateCalendar
      description: You can modify id of film, identifier of hall and startCalendar properties
      parameters:
        - name: idCalendar
          required: true
          in: path
          schema:
            type: integer
      requestBody:
        required: true
        description: Update Calendar with properties to be changed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/calendar'
      responses:
          200:
            description: Calendar updated
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/calendar'
  /hall:
    get:
      tags:
      - Hall
      summary: Get all Halls
      operationId: getHalls
      description: Get all Halls with details
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
      - name: page_size
        in: query
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Bad request
        200:
          description: List of Halls
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/hall'
                  
  /hall/{number}:
    get:
      tags:
      - Hall
      summary: Get an hall
      operationId: getHallsByNumber
      description: Get an hall with details
      parameters:
      - name: number
        in : path
        required : true
        schema:
          type: string
      - name: page
        in: query
        required: true
        schema:
          type: integer
      - name: page_size
        in: query
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Bad request
        200:
          description: Details of an hall
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/hall'
    patch:
      tags:
        - Hall
      summary: Update a Hall
      operationId: updateHall
      parameters:
        - name: number
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        description: Update an hall with capacity property to be changed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateHall'
      responses:
          200:
            description: Hall updated
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/hall'
              

components:
  schemas:
    createFilms:
      type: object
      properties:
        title: 
          type: string
          example: Pirates of the Caribbean 1
        duration:
          type: string
          example: 02:23:00
        summary:
          type: string
          example: summary
        director:
          type: string
          example: Gore Verbinski
        realeseDate:
          type: string
          format: date
        category:
          type: object
          allOf:
          - $ref: '#/components/schemas/category'
    films:
      type: object
      properties:
        id: 
          type: integer
        title: 
          type: string
          example: Pirate of Careebean
        duration:
          type: string
          example: 02:23:00
        summary:
          type: string
          example: summary
        director:
          type: string
          example:  Gore Verbinski
        realeseDate:
          type: string
          format: date
        category:
          type: object
          allOf:
          - $ref: '#/components/schemas/useCategory'

    projection:
      type: object
      properties:
        id: 
          type: integer
        film:
          type: object
          allOf:
          - $ref: '#/components/schemas/films'
        Hall:
          type: object
          allOf:
          - $ref: '#/components/schemas/hall'
        startProjection:
          type: string
          format: date-time
          example: "2022-07-31 14:00"
        endProjection:
          type: string
          format: date-time
          example: "2022-07-31 16:00"
    createProjection:
      type: object
      properties:
        Film:
          type: integer
        Hall:
          type: string
          example: A
        startProjection:
          type: string
          format: date-time 
          example: "2022-07-31 14:00"
        endProjection:
          type: string
          format: date-time
          example: "2022-07-31 16:00"
    updateProjection:
      type: object
      properties:
        Film:
          type: integer
        Hall:
          type: string
        startProjection:
          type: string
          format: date-time
          example: "2022-07-31 14:00"
        endProjection:
          type: string
          format: date-time
          example: "2022-07-31 16:00"

    hall:
      type: object
      properties:
        number: 
          type: string
          example: A
        capacity:
          type: integer
          example: 100
    updateHall:
      type: object
      properties:
        capacity:
          type: integer
          example: 100
          
    category:
      type: object
      properties:
        identifier:
          type: integer
    useCategory:
      type: object
      properties:
        identifier:
          type: integer
        category: 
          type: string
          example: Action
          
    calendar:
      type: object
      properties:
        week:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/day'
          
    day:
      type: object
      properties:
        date:
          type: string
          format: date
          example: "2022-08-01"
        projections:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/projection'
